// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250809060214_AddIsBreakpointInCharacterStatScaling")]
    partial class AddIsBreakpointInCharacterStatScaling
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Models.CharacterModels.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharacterElementId")
                        .HasColumnType("integer");

                    b.Property<int?>("CharacterWeaponTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("IconId")
                        .HasColumnType("integer");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterElementId");

                    b.HasIndex("CharacterWeaponTypeId");

                    b.HasIndex("GameId");

                    b.HasIndex("IconId");

                    b.HasIndex("ImageId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("API.Models.CharacterModels.CharacterElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("CharacterElements");
                });

            modelBuilder.Entity("API.Models.CharacterModels.CharacterStatScaling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("CharacterStatTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBreakpoint")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CharacterStatTypeId");

                    b.ToTable("CharacterStatScalings");
                });

            modelBuilder.Entity("API.Models.CharacterModels.CharacterStatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("CharacterStatTypes");
                });

            modelBuilder.Entity("API.Models.CharacterModels.CharacterWeaponType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("CharacterWeaponTypes");
                });

            modelBuilder.Entity("API.Models.GameModels.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxMainStats")
                        .HasColumnType("integer");

                    b.Property<int>("MaxSubStats")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("API.Models.GameModels.GameArtifactName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ImageId");

                    b.ToTable("GameArtifactNames");
                });

            modelBuilder.Entity("API.Models.GameModels.GameStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("StatTypeId");

                    b.ToTable("GameStats", (string)null);
                });

            modelBuilder.Entity("API.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ImageStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SplashArtPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImageStatusId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("API.Models.ImageStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageStatuses");
                });

            modelBuilder.Entity("API.Models.StatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StatTypes");
                });

            modelBuilder.Entity("API.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("API.Models.WeaponModels.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ImageId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("API.Models.WeaponModels.WeaponStatScaling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.Property<int>("WeaponId")
                        .HasColumnType("integer");

                    b.Property<int>("WeaponStatTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WeaponId");

                    b.HasIndex("WeaponStatTypeId");

                    b.ToTable("WeaponStatScalings");
                });

            modelBuilder.Entity("API.Models.WeaponModels.WeaponStatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("WeaponStatTypes");
                });

            modelBuilder.Entity("API.Models.WuwaMainStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WuwaMainStats");
                });

            modelBuilder.Entity("ImageTag", b =>
                {
                    b.Property<int>("ImagesId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("ImagesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ImageTag");
                });

            modelBuilder.Entity("API.Models.CharacterModels.Character", b =>
                {
                    b.HasOne("API.Models.CharacterModels.CharacterElement", "CharacterElement")
                        .WithMany("Characters")
                        .HasForeignKey("CharacterElementId");

                    b.HasOne("API.Models.CharacterModels.CharacterWeaponType", "CharacterWeaponType")
                        .WithMany("Characters")
                        .HasForeignKey("CharacterWeaponTypeId");

                    b.HasOne("API.Models.GameModels.Game", "Game")
                        .WithMany("Characters")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Image", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Models.Image", "Image")
                        .WithMany("Characters")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CharacterElement");

                    b.Navigation("CharacterWeaponType");

                    b.Navigation("Game");

                    b.Navigation("Icon");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("API.Models.CharacterModels.CharacterElement", b =>
                {
                    b.HasOne("API.Models.GameModels.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("API.Models.CharacterModels.CharacterStatScaling", b =>
                {
                    b.HasOne("API.Models.CharacterModels.Character", "Character")
                        .WithMany("StatScalings")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.CharacterModels.CharacterStatType", "CharacterStatType")
                        .WithMany("CharacterStatScalings")
                        .HasForeignKey("CharacterStatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("CharacterStatType");
                });

            modelBuilder.Entity("API.Models.CharacterModels.CharacterStatType", b =>
                {
                    b.HasOne("API.Models.GameModels.Game", "Game")
                        .WithMany("CharacterStatTypes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("API.Models.CharacterModels.CharacterWeaponType", b =>
                {
                    b.HasOne("API.Models.GameModels.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("API.Models.GameModels.GameArtifactName", b =>
                {
                    b.HasOne("API.Models.GameModels.Game", "Game")
                        .WithMany("GameArtifactNames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Image", "Image")
                        .WithMany("GameArtifactNames")
                        .HasForeignKey("ImageId");

                    b.Navigation("Game");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("API.Models.GameModels.GameStat", b =>
                {
                    b.HasOne("API.Models.GameModels.Game", "Game")
                        .WithMany("GameStats")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.StatType", "StatType")
                        .WithMany("GameStats")
                        .HasForeignKey("StatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("StatType");
                });

            modelBuilder.Entity("API.Models.Image", b =>
                {
                    b.HasOne("API.Models.ImageStatus", "ImageStatus")
                        .WithMany()
                        .HasForeignKey("ImageStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageStatus");
                });

            modelBuilder.Entity("API.Models.WeaponModels.Weapon", b =>
                {
                    b.HasOne("API.Models.GameModels.Game", "Game")
                        .WithMany("Weapons")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Image", "Image")
                        .WithMany("Weapons")
                        .HasForeignKey("ImageId");

                    b.Navigation("Game");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("API.Models.WeaponModels.WeaponStatScaling", b =>
                {
                    b.HasOne("API.Models.WeaponModels.Weapon", "Weapon")
                        .WithMany("StatScalings")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.WeaponModels.WeaponStatType", "WeaponStatType")
                        .WithMany("WeaponStatScalings")
                        .HasForeignKey("WeaponStatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Weapon");

                    b.Navigation("WeaponStatType");
                });

            modelBuilder.Entity("API.Models.WeaponModels.WeaponStatType", b =>
                {
                    b.HasOne("API.Models.GameModels.Game", "Game")
                        .WithMany("WeaponStatTypes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("ImageTag", b =>
                {
                    b.HasOne("API.Models.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.CharacterModels.Character", b =>
                {
                    b.Navigation("StatScalings");
                });

            modelBuilder.Entity("API.Models.CharacterModels.CharacterElement", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("API.Models.CharacterModels.CharacterStatType", b =>
                {
                    b.Navigation("CharacterStatScalings");
                });

            modelBuilder.Entity("API.Models.CharacterModels.CharacterWeaponType", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("API.Models.GameModels.Game", b =>
                {
                    b.Navigation("CharacterStatTypes");

                    b.Navigation("Characters");

                    b.Navigation("GameArtifactNames");

                    b.Navigation("GameStats");

                    b.Navigation("WeaponStatTypes");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("API.Models.Image", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("GameArtifactNames");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("API.Models.StatType", b =>
                {
                    b.Navigation("GameStats");
                });

            modelBuilder.Entity("API.Models.WeaponModels.Weapon", b =>
                {
                    b.Navigation("StatScalings");
                });

            modelBuilder.Entity("API.Models.WeaponModels.WeaponStatType", b =>
                {
                    b.Navigation("WeaponStatScalings");
                });
#pragma warning restore 612, 618
        }
    }
}
