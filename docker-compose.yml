version: '3.8'

services:
  api:
    image: ${DOCKER_REGISTRY-}api
    build:
        context: .
        dockerfile: Backend/API/Dockerfile
    ports:
        - "${API_PORT}:8080"
        - "${API_ADMIN_PORT}:8081"
    environment:
        - ConnectionStrings__DefaultConnection=Server=${POSTGRES_HOST};PORT=${POSTGRES_PORT};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB}
        - ConnectionStrings__RedisConnection=${REDIS_HOST}:${REDIS_PORT}
        - OCR_URL=${OCR_URL}:${OCR_PORT}
        - API_CORS_ORIGIN=${API_CORS_ORIGIN}
        - OCR_CORS_ORIGIN=${OCR_CORS_ORIGIN}
        - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
    volumes:
        - ./API/Storage/Images:/app/Storage/Images
    depends_on:
        postgres:
            condition: service_healthy
    networks:
      - my_network
  
  ocr:
    image: ${DOCKER_REGISTRY-}ocr
    build:
        context: ./ocr_service
        dockerfile: Dockerfile
    ports:
        - "${OCR_PORT}:${OCR_PORT}"
    environment:
        - API_URL=${OCR_API_URL}
    networks:
      - my_network

  frontend:
    image: ${DOCKER_REGISTRY-}frontend
    build:
        context: ./react-frontend
        dockerfile: Dockerfile
    volumes:
        - ./react-frontend:/app
        - /app/node_modules
    ports:
        - "${FRONTEND_PORT}:3000"
    environment:
        - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
        - WATCHPACK_POLLING=${WATCHPACK_POLLING}
        - WDS_SOCKET_PORT=${WDS_SOCKET_PORT}
        - REACT_APP_API_URL=${REACT_APP_API_URL}
    depends_on:
        - api
    networks:
      - my_network

  postgres:
    image: postgres:latest
    restart: unless-stopped
    ports:
        - "${POSTGRES_PORT}:5432"
    volumes:
        - ./postgres_data:/var/lib/postgresql/data
    environment:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
        test: ["CMD", "pg_isready", "-U", "postgres"]
        interval: 10s
        timeout: 5s
        retries: 5
    networks:
      - my_network

  pgadmin:
    image: dpage/pgadmin4
    ports:
        - "${PGADMIN_PORT}:80"
    volumes:
        - ./pgadmin_data:/var/lib/pgadmin
    environment:
        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - my_network
 
  redis:
    image: redis:latest
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 3s
        retries: 5
    ports:
        - "${REDIS_PORT}:6379"
    networks:
      - my_network

  listener:
    image: ${DOCKER_REGISTRY-}listener
    build: 
        context: ./database_listener
        dockerfile: Dockerfile
    depends_on:
        postgres:
            condition: service_healthy
        redis:
            condition: service_healthy
    environment: 
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_HOST=${POSTGRES_HOST}
        - REDIS_HOST=${REDIS_HOST}
    networks:
        - my_network

networks:
    my_network:
        driver: bridge

volumes:
    postgres_data:
    pgadmin_data:
