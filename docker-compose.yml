services:
  api:
    image: ${DOCKER_REGISTRY-}api
    build:
        context: .
        dockerfile: Backend/API/Dockerfile
    ports:
        - "8080:8080"
        - "8081:8081"
    depends_on:
        postgres:
            condition: service_healthy
    networks:
      - my_network
  
  ocr:
    image: ${DOCKER_REGISTRY-}ocr
    build:
        context: ./ocr_service
        dockerfile: Dockerfile
    ports:
        - "8000:8000"
    networks:
      - my_network

  frontend:
    image: ${DOCKER_REGISTRY-}frontend
    build:
        context: ./react-frontend
        dockerfile: Dockerfile
    volumes:
        - ./react-frontend:/app
        - /app/node_modules
    ports:
        - "3000:3000"
    environment:
        - CHOKIDAR_USEPOLLING=true
        - WATCHPACK_POLLING=true
        - WDS_SOCKET_PORT=3000
    depends_on:
        - api
    networks:
      - my_network

  postgres:
    image: postgres:latest
    restart: unless-stopped
    ports:
        - "5432:5432"
    volumes:
        - ./postgres_data:/var/lib/postgresql/data
    environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=postgres
        - POSTGRES_DB=postgres
    healthcheck:
        test: ["CMD", "pg_isready", "-U", "postgres"]
        interval: 10s
        timeout: 5s
        retries: 5
    networks:
      - my_network

  pgadmin:
    image: dpage/pgadmin4
    ports:
        - "5050:80"
    volumes:
        - ./pgadmin_data:/var/lib/pgadmin
    environment:
        PGADMIN_DEFAULT_EMAIL: user@email.com
        PGADMIN_DEFAULT_PASSWORD: admin
    networks:
      - my_network

networks:
    my_network:
        driver: bridge

volumes:
    postgres_data:
    pgadmin_data:
